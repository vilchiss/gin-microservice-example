{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is a sample recipes API",
    "title": "Recipes API",
    "contact": {
      "name": "Luis Oropeza",
      "url": "https://www.gitlab.com/luisfi",
      "email": "luis.oropeza@gmail.com"
    },
    "version": "1.0.0"
  },
  "host": "localhost:8080",
  "basePath": "/",
  "paths": {
    "/recipes": {
      "get": {
        "description": "Returns list of recipes",
        "produces": [
          "application/json"
        ],
        "tags": [
          "recipes"
        ],
        "operationId": "listRecipes",
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        }
      },
      "post": {
        "description": "Create a new recipe",
        "produces": [
          "application/json"
        ],
        "tags": [
          "recipes"
        ],
        "operationId": "newRecipe",
        "parameters": [
          {
            "type": "string",
            "description": "token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "description": "recipe data",
            "name": "Recipe",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Recipe"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/recipes/{id}": {
      "get": {
        "description": "Get a recipe by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "recipes"
        ],
        "operationId": "getRecipe",
        "parameters": [
          {
            "type": "string",
            "description": "token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "recipe ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        }
      },
      "put": {
        "description": "Update an existing recipe",
        "produces": [
          "application/json"
        ],
        "tags": [
          "recipes"
        ],
        "operationId": "updateRecipe",
        "parameters": [
          {
            "type": "string",
            "description": "token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "ID of the recipe",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "recipe data",
            "name": "Recipe",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Recipe"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Recipe"
            }
          },
          "400": {
            "description": "Invalid Input"
          },
          "404": {
            "description": "Invalid recipe ID"
          }
        }
      },
      "delete": {
        "description": "Delete an existing recipe",
        "produces": [
          "application/json"
        ],
        "tags": [
          "recipes"
        ],
        "operationId": "deleteRecipe",
        "parameters": [
          {
            "type": "string",
            "description": "token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "ID of the recipe",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "Invalid recipe ID"
          }
        }
      }
    },
    "/refresh": {
      "post": {
        "description": "Get new token in exchange for and old one",
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "operationId": "refresh",
        "parameters": [
          {
            "type": "string",
            "description": "token",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Invalid token"
          },
          "404": {
            "description": "Token is not expired yet"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/signin": {
      "post": {
        "description": "Login with username and password",
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "operationId": "signin",
        "parameters": [
          {
            "$ref": "#/definitions/ObjectID",
            "x-go-name": "ID",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "RegisteredAt",
            "name": "registered_at",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Password",
            "name": "password",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Username",
            "name": "username",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/jwtOutput"
            }
          },
          "401": {
            "description": "Invalid username or password"
          },
          "404": {
            "description": "Invalid data"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/signout": {
      "post": {
        "description": "Signout",
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "operationId": "signout",
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/signup": {
      "post": {
        "description": "Register a new user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "operationId": "signup",
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "Invalid data"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/{username}": {
      "get": {
        "description": "Get a user information by username",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "getUserInformation",
        "parameters": [
          {
            "type": "string",
            "description": "user name",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Internal error"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "definitions": {
    "ObjectID": {
      "type": "array",
      "title": "ObjectID is the BSON ObjectID type.",
      "items": {
        "type": "integer",
        "format": "uint8"
      },
      "x-go-package": "go.mongodb.org/mongo-driver/bson/primitive"
    },
    "Recipe": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "ingredients": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Ingredients"
        },
        "instructions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Instructions"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "published_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "PublishedAt"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tags"
        }
      },
      "x-go-package": "go-microservices-example/models"
    },
    "jwtOutput": {
      "type": "object",
      "properties": {
        "expires": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Expires"
        },
        "token": {
          "type": "string",
          "x-go-name": "Token"
        }
      },
      "x-go-name": "JWTOutput",
      "x-go-package": "go-microservices-example/handlers"
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}